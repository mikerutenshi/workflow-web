// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  description       String?
  clearanceLevel    Int

  users             User[]
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  firstName         String
  lastName          String
  isActive          Boolean         @default(false)
  roleId            Int

  approvedAt        DateTime?  
  approvedBy        Int?
  createdAt         DateTime        @default(now())
  createdBy         Int?
  updatedAt         DateTime        @updatedAt
  updatedBy         Int?

  role              Role            @relation(fields: [roleId], references: [id])
  creator           User?           @relation("CreatedBy", fields: [createdBy], references: [id])
  createdUsers      User[]          @relation("CreatedBy")
  approver          User?           @relation("ApprovedBy", fields: [approvedBy], references: [id])
  approvedUsers     User[]          @relation("ApprovedBy")
}

model Color {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  hexCode           String

  productColors     ProductColors[]
}

enum Gender {
  MEN
  WOMEN
  KIDS  
}

model ProductCategory {
  id                Int             @id @default(autoincrement())
  name              String
  gender            Gender

  productGroups     ProductGroup[]
}

model ProductGroup {
  id                Int             @id @default(autoincrement())
  skuNumeric        Int
  productCategoryId Int
  name              String?

  products          Product[]
  labourCost        LabourCost?

  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
}

model Product {
  id                Int             @id @default(autoincrement())
  sku               String
  productGroupId    Int

  createdAt         DateTime        @default(now())
  createdBy         Int
  updatedAt         DateTime        @updatedAt
  updatedBy         Int?

  productColors     ProductColors[]

  productGroup      ProductGroup    @relation(fields: [productGroupId], references: [id], onDelete: Cascade)
}

model ProductColors {
  productId         Int
  colorId           Int
  order             Int           

  @@id([productId, colorId])

  product           Product         @relation(fields: [productId], references: [id])
  color             Color           @relation(fields: [colorId], references: [id])
}

model LabourCost {
  id                Int             @id @default(autoincrement())
  skuNumeric        Int
  drawingUpper      Int
  drawingLining     Int
  stitchingUpper    Int
  stitchingOutsole  Int?
  stitchingInsole   Int?
  lasting           Int
  productGroupId    Int             @unique

  createdAt         DateTime        @default(now())
  createdBy         Int
  updatedAt         DateTime        @updatedAt
  updatedBy         Int?

  productGroup      ProductGroup    @relation(fields: [productGroupId], references: [id])
}