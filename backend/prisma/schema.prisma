// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  description       String?
  clearanceLevel    Int

  users             User[]
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  firstName         String
  lastName          String?
  isActive          Boolean         @default(false)
  roleId            Int

  createdBy         Int?
  updatedBy         Int?
  approvedBy        Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  approvedAt        DateTime?  

  role              Role            @relation(fields: [roleId], references: [id])
  creator           User?           @relation("CreatedBy", fields: [createdBy], references: [id])
  createdUsers      User[]          @relation("CreatedBy")
  approver          User?           @relation("ApprovedBy", fields: [approvedBy], references: [id])
  approvedUsers     User[]          @relation("ApprovedBy")
}

model Color {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  hexCode           String

  productColors     ColorToProduct[]
}

enum Gender {
  MEN
  WOMEN
  KIDS  
}

model ProductCategory {
  id                Int             @id @default(autoincrement())
  name              String
  gender            Gender

  productGroups     ProductGroup[]
}

model ProductGroup {
  id                Int             @id @default(autoincrement())
  skuNumeric        String
  productCategoryId Int
  name              String?

  createdAt         DateTime        @default(now())
  createdBy         Int
  updatedAt         DateTime        @updatedAt
  updatedBy         Int?

  products          Product[]
  laborCosts        LaborCost[]

  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
}

model Product {
  id                Int             @id @default(autoincrement())
  sku               String
  productGroupId    Int

  createdBy         Int
  updatedBy         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  productColors     ColorToProduct[]
  work              Work[]

  productGroup      ProductGroup    @relation(fields: [productGroupId], references: [id])
}

model ColorToProduct {
  productId         Int
  colorId           Int
  order             Int           

  @@id([productId, colorId])

  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  color             Color           @relation(fields: [colorId], references: [id])
}

enum Job {
  DRAW_UPPER
  DRAW_LINING
  STITCH_UPPER
  STITCH_OUTSOLE
  STITCH_INSOLE
  LAST
}

model LaborCost {
  id                Int             @id @default(autoincrement())
  type              Job
  cost              Int
  productGroupId    Int             

  @@unique([productGroupId, type])

  createdBy         Int
  updatedBy         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  tasks             Task[]
  productGroup      ProductGroup    @relation(fields: [productGroupId], references: [id])
}

model Artisan {
  id                Int             @id @default(autoincrement())
  firstName         String
  lastName          String?
  jobs              Job[]
  tasks             Task[]

  createdBy         Int
  updatedBy         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Work {
  id                Int             @id @default(autoincrement())
  date              DateTime
  orderNo           String             @unique
  productId         Int             
  sizes             SizeToWork[]
  tasks             Task[]

  createdBy         Int
  updatedBy         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  product           Product         @relation(fields: [productId], references: [id])
}

model Task {
  id                Int             @id @default(autoincrement())
  workId            Int
  type              Job
  artisanId         Int?
  doneAt            DateTime?
  laborCostId       Int
  @@unique([workId, type])

  work              Work            @relation(fields: [workId], references: [id], onDelete: Cascade)
  artisan           Artisan?        @relation(fields: [artisanId], references: [id])
  laborCost         LaborCost       @relation(fields: [laborCostId], references: [id], onDelete: Cascade)

  createdBy         Int
  updatedBy         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Size {
  id                Int             @id @default(autoincrement())
  eu                String          
  us                String?         
  uk                String?         
  jp                String?
  gender            Gender

  works             SizeToWork[]

  @@unique([eu, gender])
  @@unique([us, gender])
  @@unique([uk, gender])
}

model SizeToWork {
  @@id([workId, sizeId])
  workId            Int
  sizeId            Int
  quantity          Int

  work              Work            @relation(fields: [workId], references: [id], onDelete: Cascade)
  size              Size            @relation(fields: [sizeId], references: [id])
}