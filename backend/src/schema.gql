# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  name: String!
  description: String
  clearanceLevel: Float!
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String
  isActive: Boolean!
  role: Role!
  approvedAt: Date
  approvedBy: ID
  createdAt: Date!
  createdBy: ID
  updatedAt: Date!
  updatedBy: ID
}

type Product {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  sku: String!
  productGroupId: ID!
}

type ProductCategory {
  id: ID!
  name: String!
  gender: Gender!
}

enum Gender {
  MEN
  WOMEN
  KIDS
}

type ProductGroup {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
}

type ProductGroupWithCategoryDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
  productCategory: ProductCategory!
}

type Color {
  id: ID!
  name: String!
  hexCode: String!
}

type ProductColorsWithColor {
  productId: ID!
  colorId: ID!
  order: Float!
  color: Color!
}

type GetProductsDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  sku: String!
  productGroupId: ID!
  productGroup: ProductGroupWithCategoryDto!
  productColors: [ProductColorsWithColor!]!
}

type LaborCost {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  drawingUpper: Float!
  drawingLining: Float!
  stitchingUpper: Float!
  stitchingOutsole: Float
  stitchingInsole: Float
  lasting: Float!
  productGroupId: ID!
}

type ProductWithColorDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  sku: String!
  productGroupId: ID!
  productColors: [ProductColorsWithColor!]!
}

type GetProductGroupsDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
  productCategory: ProductCategory!
  products: [ProductWithColorDto]
  laborCost: LaborCost
}

type Artisan {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  firstName: String!
  lastName: String
  jobs: [Job!]!
}

enum Job {
  UPPER_DRAW
  LINING_DRAW
  UPPER_STITCH
  OUTSOLE_STITCH
  INSOLE_STITCH
  LAST
}

type Size {
  id: ID!
  eu: String!
  us: String
  uk: String
}

type Work {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWork!]!
}

type SizeToWork {
  quantity: Float!
  size: Size!
}

type Task {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  workId: ID!
  type: Job!
  artisanId: ID
  doneAt: Date
}

type WorkWithTasks {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWork!]!
  tasks: [Task!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  getUsers: [User!]!
  me: User!
  getColors: [Color!]!
  getColor(id: ID!): Color!
  getProducts: [GetProductsDto!]!
  getProduct(id: ID!): GetProductsDto!
  getProductCategories: [ProductCategory!]!
  getProductCategory(id: ID!): ProductCategory!
  getProductGroups: [GetProductGroupsDto!]!
  getProductGroup(id: ID!): GetProductGroupsDto!
  getLaborCosts: [LaborCost!]!
  getArtisans: [Artisan!]!
  getArtisan(id: ID!): Artisan!
  getWork(id: ID!): WorkWithTasks!
  getWorks: [WorkWithTasks!]!
  getSize(id: ID!): Size!
  getSizes: [Size!]!
}

type Mutation {
  createRole(data: RoleDto!): Role!
  createUser(data: CreateUserDto!): User!
  logIn(data: LogInDto!): User!
  logOut: User!
  createColor(data: CreateColorDto!): Color!
  updateColor(id: ID!, data: CreateColorDto!): Color!
  deleteColor(id: ID!): Boolean!
  createProduct(data: CreateProductDto!): Product!
  updateProduct(id: ID!, data: CreateProductDto!): Product!
  deleteProduct(id: ID!): Boolean!
  createProductCategory(data: CreateProductCategoryDto!): ProductCategory!
  updateProductCategory(id: ID!, data: CreateProductCategoryDto!): ProductCategory!
  deleteProductCategory(id: ID!): Boolean!
  createProductGroup(data: CreateProductGroupDto!): ProductGroup!
  updateProductGroup(id: ID!, data: CreateProductGroupDto!): ProductGroup!
  deleteProductGroup(id: ID!): Boolean!
  createLaborCost(data: CreateLaborCostDto!): LaborCost!
  updateLaborCost(id: ID!, data: CreateLaborCostDto!): LaborCost!
  createArtisan(data: CreateArtisanDto!): Artisan!
  updateArtisan(id: ID!, data: CreateArtisanDto!): Artisan!
  deleteArtisan(id: ID!): Boolean!
  createWork(data: CreateWorkDto!): Work!
  updateWork(id: ID!, data: UpdateWorkDto!): Work!
  deleteWork(id: ID!): Boolean!
  createSize(data: CreateSizeDto!): Size!
  updateSize(id: ID!, data: CreateSizeDto!): Size!
  deleteSize(id: ID!): Boolean!
}

input RoleDto {
  name: String!
  description: String
  cleareanceLevel: Float!
}

input CreateUserDto {
  email: String!
  password: String!
  firstName: String!
  lastName: String
  createdBy: ID
  roleId: ID!
}

input LogInDto {
  email: String!
  password: String!
}

input CreateColorDto {
  name: String!
  hexCode: String!
}

input CreateProductDto {
  sku: String!
  productGroupId: ID!
  createdBy: ID!
  updatedBy: ID
  colorIds: [ID!]!
}

input CreateProductCategoryDto {
  name: String!
  gender: String!
}

input CreateProductGroupDto {
  skuNumeric: String!
  productCategoryId: ID!
  name: String
  createdBy: ID!
  updatedBy: ID
}

input CreateLaborCostDto {
  drawingUpper: Float!
  drawingLining: Float!
  stitchingUpper: Float!
  stitchingOutsole: Float
  stitchingInsole: Float
  lasting: Float!
  productGroupId: ID!
  createdBy: ID!
  updatedBy: ID
}

input CreateArtisanDto {
  firstName: String!
  lastName: String
  jobs: [Job!]!
  createdBy: ID!
  updatedBy: ID
}

input CreateWorkDto {
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWorkDto!]!
  createdBy: ID!
}

input SizeToWorkDto {
  id: ID!
  quantity: Float!
}

input UpdateWorkDto {
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWorkDto!]!
  createdBy: ID!
  updatedBy: ID!
}

input CreateSizeDto {
  eu: String!
  us: String
  uk: String
}