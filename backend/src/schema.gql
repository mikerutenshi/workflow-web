# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  name: String!
  description: String
  clearanceLevel: Float!
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String
  isActive: Boolean!
  role: Role!
  approvedAt: Date
  approvedBy: ID
  createdAt: Date!
  createdBy: ID
  updatedAt: Date!
  updatedBy: ID
}

type Product {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  sku: String!
  productGroupId: ID!
}

type ProductCategory {
  id: ID!
  name: String!
  gender: Gender!
}

enum Gender {
  MEN
  WOMEN
  KIDS
}

type ProductGroup {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
}

type ProductGroupWithCategory {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
  productCategory: ProductCategory!
}

type Color {
  id: ID!
  name: String!
  hexCode: String!
}

type ColorToProductWithColor {
  productId: ID!
  colorId: ID!
  order: Float!
  color: Color!
}

type ProductGetDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  sku: String!
  productGroupId: ID!
  productGroup: ProductGroupWithCategory!
  productColors: [ColorToProductWithColor!]!
}

type ProductGroupGetDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
  productCategory: ProductCategory!
}

type LaborCost {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  type: String!
  cost: Float!
  productGroupId: ID!
}

type LaborCostGetDto {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  skuNumeric: String!
  name: String
  productCategoryId: ID!
  productCategory: ProductCategory!
  laborCosts: [LaborCost]
}

type Artisan {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  firstName: String!
  lastName: String
  jobs: [Job!]!
}

enum Job {
  DRAW_UPPER
  DRAW_LINING
  STITCH_UPPER
  LAST
  STITCH_OUTSOLE
  STITCH_INSOLE
}

type Size {
  id: ID!
  eu: String!
  us: String
  uk: String
  jp: String
  gender: Gender!
}

type SizeToWork {
  workId: ID!
  sizeId: ID!
  quantity: Float!
  size: Size!
}

type Work {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWork!]!
}

type TaskWithArtisan {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  workId: ID!
  type: Job!
  artisanId: ID
  doneAt: Date
  artisan: Artisan
}

type WorkWithTasks {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWork!]!
  tasks: [TaskWithArtisan!]!
  product: Product!
}

type WorkWithProduct {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWork!]!
  product: Product!
}

type TaskWithWork {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  workId: ID!
  type: Job!
  artisanId: ID
  doneAt: Date
  work: WorkWithProduct!
  quantityPerTask: Float!
  costPerTask: Float!
  payablePerTask: Float!
}

type ArtisanWithTasks {
  id: ID!
  createdBy: ID!
  updatedBy: ID
  createdAt: Date!
  updatedAt: Date!
  firstName: String!
  lastName: String
  jobs: [Job!]!
  tasks: [TaskWithWork!]!
  payablePerArtisan: Float!
  quantityPerArtisan: Float!
}

type PayrollGetDto {
  totalPayable: Float!
  totalQuantity: Float!
  artisans: [ArtisanWithTasks!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  getUsers: [User!]!
  me: User!
  getColors: [Color!]!
  getColor(id: ID!): Color!
  getProducts: [ProductGetDto!]!
  getProduct(id: ID!): ProductGetDto!
  getProductCategories: [ProductCategory!]!
  getProductCategory(id: ID!): ProductCategory!
  getProductGroups: [ProductGroupGetDto!]!
  getProductGroup(id: ID!): ProductGroupGetDto!
  getLaborCosts: [LaborCostGetDto!]!
  getLaborCost(id: ID!): LaborCostGetDto!
  getArtisans: [Artisan!]!
  getArtisan(id: ID!): Artisan!
  getWork(id: ID!): WorkWithTasks!
  getWorks(startDate: Date!, endDate: Date!): [WorkWithTasks!]!
  getSize(id: ID!): Size!
  getSizes: [Size!]!
  getTasks(workId: ID!): [TaskWithArtisan!]!
  getPayroll(startDate: Date!, endDate: Date!): PayrollGetDto!
}

type Mutation {
  createRole(data: RoleDto!): Role!
  createUser(data: UserCreateDto!): User!
  logIn(data: LogInDto!): User!
  logOut: User!
  createColor(data: ColorCreateDto!): Color!
  updateColor(id: ID!, data: ColorCreateDto!): Color!
  deleteColor(id: ID!): Boolean!
  createProduct(data: ProductCreateDto!): Product!
  updateProduct(id: ID!, data: ProductCreateDto!): Product!
  deleteProduct(id: ID!): Boolean!
  createProductCategory(data: ProductCategoryCreateDto!): ProductCategory!
  updateProductCategory(id: ID!, data: ProductCategoryCreateDto!): ProductCategory!
  deleteProductCategory(id: ID!): Boolean!
  createProductGroup(data: ProductGroupCreateDto!): ProductGroup!
  updateProductGroup(id: ID!, data: ProductGroupCreateDto!): ProductGroup!
  deleteProductGroup(id: ID!): Boolean!
  upsertLaborCosts(productGroupId: ID!, data: [LaborCostUpsertDto!]!): [LaborCost!]!
  updateLaborCosts(data: LaborCostUpdateDto!): Boolean!
  createArtisan(data: ArtisanCreateDto!): Artisan!
  updateArtisan(id: ID!, data: ArtisanCreateDto!): Artisan!
  deleteArtisan(id: ID!): Boolean!
  createWork(data: WorkCreateDto!): Work!
  updateWork(id: ID!, data: WorkUpdateDto!): Work!
  deleteWork(id: ID!): Boolean!
  createSize(data: SizeCreateDto!): Size!
  updateSize(id: ID!, data: SizeCreateDto!): Size!
  deleteSize(id: ID!): Boolean!
  updateTasks(data: [TaskUpdateDto!]!): [TaskWithArtisan!]!
}

input RoleDto {
  name: String!
  description: String
  cleareanceLevel: Float!
}

input UserCreateDto {
  email: String!
  password: String!
  firstName: String!
  lastName: String
  createdBy: ID
  roleId: ID!
}

input LogInDto {
  email: String!
  password: String!
}

input ColorCreateDto {
  name: String!
  hexCode: String!
}

input ProductCreateDto {
  sku: String!
  productGroupId: ID!
  createdBy: ID!
  updatedBy: ID
  colorIds: [ID!]!
}

input ProductCategoryCreateDto {
  name: String!
  gender: String!
}

input ProductGroupCreateDto {
  skuNumeric: String!
  productCategoryId: ID!
  name: String
  createdBy: ID!
  updatedBy: ID
}

input LaborCostUpsertDto {
  type: Job!
  cost: Float!
  productGroupId: ID!
  createdBy: ID!
  updatedBy: ID!
}

input LaborCostUpdateDto {
  productGroupId: ID!
  createdBy: ID!
  updatedBy: ID!
  drawUpper: Float
  drawLining: Float
  stitchUpper: Float
  stitchOutsole: Float
  stitchInsole: Float
  last: Float
}

input ArtisanCreateDto {
  firstName: String!
  lastName: String
  jobs: [Job!]!
  createdBy: ID!
  updatedBy: ID
}

input WorkCreateDto {
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWorkCreateDto!]!
  createdBy: ID!
}

input SizeToWorkCreateDto {
  id: ID!
  quantity: Float!
}

input WorkUpdateDto {
  date: Date!
  orderNo: Float!
  productId: ID!
  sizes: [SizeToWorkCreateDto!]!
  createdBy: ID!
  updatedBy: ID!
}

input SizeCreateDto {
  eu: String!
  us: String
  uk: String
  jp: String
  gender: Gender!
}

input TaskUpdateDto {
  artisanId: ID
  doneAt: Date
  id: ID!
  updatedBy: ID!
}