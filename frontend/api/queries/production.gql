fragment Size on Size {
  id
  eu
  us
  uk
  jp
  gender
}

fragment TaskWithArtisan on TaskWithArtisan {
  id
  createdBy
  createdAt
  updatedBy
  updatedAt
  workId
  type
  artisan {
    id
    firstName
    lastName
    jobs
    createdBy
    updatedBy
  }
  doneAt
}

fragment WorkWithTasks on WorkWithTasks {
  id
  date
  orderNo
  productId
  sizes {
    size {
      ...Size
    }
    quantity
  }
  tasks {
    ...TaskWithArtisan
  }
  product {
    sku
  }
  createdBy
  updatedBy
  createdAt
  updatedAt
}

fragment Work on WorkWithTasks {
  id
  date
  orderNo
  productId
  sizes {
    size {
      ...Size
    }
    quantity
  }
  product {
    sku
  }
  createdBy
  updatedBy
}

mutation createSize($data: SizeCreateDto!) {
  createSize(data: $data) {
    id
  }
}

mutation updateSize($id: ID!, $data: SizeCreateDto!) {
  updateSize(id: $id, data: $data) {
    id
  }
}

mutation deleteSize($id: ID!) {
  deleteSize(id: $id)
}

query getSizes {
  getSizes {
    ...Size
  }
}

query getSize($id: ID!) {
  getSize(id: $id) {
    ...Size
  }
}

mutation createWork($data: WorkCreateDto!) {
  createWork(data: $data) {
    id
  }
}

mutation updateWork($id: ID!, $data: WorkUpdateDto!) {
  updateWork(id: $id, data: $data) {
    id
  }
}

mutation deleteWork($id: ID!) {
  deleteWork(id: $id)
}

query getWorks($startDate: Date!, $endDate: Date!) {
  getWorks(startDate: $startDate, endDate: $endDate) {
    ...WorkWithTasks
  }
}

query getWork($id: ID!) {
  getWork(id: $id) {
    ...Work
  }
}

query getTasks($workId: ID!) {
  getTasks(workId: $workId) {
    ...TaskWithArtisan
  }
}

mutation updateTasks($data: [TaskUpdateDto!]!) {
  updateTasks(data: $data) {
    id
  }
}

query getPayroll($startDate: Date!, $endDate: Date!) {
  getPayroll(startDate: $startDate, endDate: $endDate) {
    artisans {
      id
      firstName
      lastName
      tasks {
        payablePerTask
        costPerTask
        quantityPerTask
        type
        doneAt
        work {
          orderNo
          sizes {
            size {
              eu
            }
            quantity
          }
          product {
            sku
            # productGroup {
            #   skuNumeric
            #   laborCosts {
            #     type
            #     cost
            #   }
            # }
          }
        }
      }
      payablePerArtisan
      quantityPerArtisan
    }
    totalPayable
    totalQuantity
  }
}

query getWorkAuditTrail($id: ID!) {
  getWork(id: $id) {
    date
    createdAt
    updatedAt
    createdBy
    updatedBy
  }
}
